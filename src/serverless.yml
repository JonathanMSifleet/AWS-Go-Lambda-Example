service: GoLambdaExample
frameworkVersion: '3'

plugins:
  - serverless-go-plugin

provider:
  name: aws
  runtime: provided.al2
  apiGateway:
    minimumCompressionSize: 1024
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    USER_TABLE_NAME: ${self:custom.UserTable.name}
  iam:
    role:
      statements:
        - ${file(aws/iam/UserTableIAM.yml):UserTableIAM}

package:
  individually: true

functions:
  # login:
  #   handler: aws/handlers/user/login.handler
  #   events:
  #     - http:
  #         method: POST
  #         path: user/login
  #         cors: true
  signup:
    handler: go/signup.go
    events:
      - http:
          method: POST
          path: user/signup
          cors: true
resources:
  Resources:
    UserTable: ${file(aws/resources/UserTable.yml):UserTable}

    # This response is needed for custom authorizer failures cors support
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  UserTable:
    name: !Ref UserTable
    arn: !GetAtt UserTable.Arn

  bundle:
    linting: true

  go:
    supportedRuntimes: ["provided.al2"]
    buildProvidedRuntimeAsBootstrap: true